package xyz.util;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.alipay.util.json.JSONUtils;

import xyz.filter.ReturnUtil;
import xyz.filter.RmiUtil;
import xyz.model.main.ProductObject;
import xyz.model.main.ProductStock;
import xyz.svc.config.ConstantPms;

@Component
public class PmsStockPriceUtil {

	@Autowired
	RmiUtil rmiUtil;
	
	@Autowired
	ProductUtil productUtil;
	
	public ProductStock getStockByDate(String product, Date dateInfo) {
		
		ProductObject productObject=productUtil.getProductByNumberCode(product);
		
		SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");
		Map<String,String> accessoryParam = new HashMap<String, String>();
		accessoryParam.put("product", productObject.getPmsRoomType());
		accessoryParam.put("dateInfo", format.format(dateInfo));
		Map<String, Object> result= (Map<String, Object>)rmiUtil.loadData(ConstantPms.pms_getStockByDate,accessoryParam);
		System.out.println(result.toString());
		int status=new BigDecimal(result.get("status").toString()).intValue();
		if(status==1){
			JSONObject jsStr = JSONObject.fromObject(result.get("content")).getJSONObject("content");
			ProductStock productStock=new ProductStock();
			productStock.setPrice(new BigDecimal(jsStr.getString("price")));
			productStock.setCount(jsStr.getInt("count"));
			productStock.setUseCount(jsStr.getInt("useCount"));
			try {
				productStock.setDateInfo(format.parse(jsStr.getString("dateInfo")));
			} catch (ParseException e) {
				e.printStackTrace();
			}
			return productStock;
		}
		
		return null;
		
	}

	public Map<String, Object> queryProductStockList(int page, int rows,
			String product, Date dateStart, Date dateEnd) {
		SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");
		Map<String,String> accessoryParam = new HashMap<String, String>();
		accessoryParam.put("page", page+"");
		accessoryParam.put("rows", rows+"");
		accessoryParam.put("product", product);
		accessoryParam.put("dateStart", format.format(dateStart));
		accessoryParam.put("dateEnd", format.format(dateEnd));
		return (Map<String, Object>) rmiUtil.loadData(ConstantPms.pms_queryProductStockList,accessoryParam);
	}

/*	public List<ProductStock> getStockByDate(String product, Date dateStart,
			Date dateEnd) {
		SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");
		Map<String,String> accessoryParam = new HashMap<String, String>();
		accessoryParam.put("product", product);
		accessoryParam.put("dateStart", format.format(dateStart));
		accessoryParam.put("dateEnd", format.format(dateEnd));
		Map<String, Object> result=(Map<String, Object>) rmiUtil.loadData(ConstantPms.pms_queryProductStockList,accessoryParam);
		JSONArray array=JSONArray.fromObject(result.get("content"));
		List<ProductStock> list=new ArrayList<ProductStock>();
		for (int i = 0; i < array.size(); i++) {
           	JSONObject object = (JSONObject) array.get(i);
           	ProductStock productStock=new ProductStock();
           	try {
				productStock.setDateInfo(format.parse(object.getString("dateInfo")));
			} catch (ParseException e) {
				e.printStackTrace();
			}
         	productStock.setCount(object.getInt("count"));
         	productStock.setUseCount(object.getInt("useCount"));
         	productStock.setProduct(object.getString("product"));
         	productStock.setPrice(new BigDecimal(object.getString("price")));
         	list.add(productStock);
	     }
		return list;
	}*/
	
	
	public List<ProductStock> getAllProductStock(Date dateInfo) {
		SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");
		Map<String,String> accessoryParam = new HashMap<String, String>();
		accessoryParam.put("dateInfo", format.format(dateInfo));
		Map<String, Object> result=(Map<String, Object>) rmiUtil.loadData(ConstantPms.pms_getAllProductStock,accessoryParam);
		System.out.println(result.toString());
		int status=new BigDecimal(result.get("status").toString()).intValue();
		List<ProductStock> list=new ArrayList<ProductStock>();
		if(status==1){
			JSONArray array=JSONArray.fromObject(result.get("content"));
			for (int i = 0; i < array.size(); i++) {
	           	JSONObject object = (JSONObject) array.get(i);
	           	ProductStock productStock=new ProductStock();
	         	productStock.setProduct(object.getString("product"));
	         	productStock.setPrice(new BigDecimal(object.getString("price")));
	         	list.add(productStock);
		     }
		}
		return list;
	}
	
}
