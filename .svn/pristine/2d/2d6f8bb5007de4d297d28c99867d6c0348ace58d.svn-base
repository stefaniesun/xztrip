package xyz.ctrl.wechat;

import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import xyz.util.WeixinUtil;

@Controller
@RequestMapping(value="/WeChatWS")
public class WeChatWS {
	
	/**
	 * 微信商城
	 * @throws Exception 
	 */
	@RequestMapping(value="mall")
	@ResponseBody
	public void weChatMall(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String type = request.getMethod();
		System.out.println(type);
		if("GET".equals(type)){
			String token="xztrip";
		    String signature =  request.getParameter("signature");
		    String timestamp = request.getParameter("timestamp");
		    String nonce = request.getParameter("nonce");
		    String echostr = request.getParameter("echostr");
		    
	        boolean result =  WeixinUtil.checkSignature(token, signature,timestamp,nonce);
		    if(result){
		    	try {
					response.getWriter().write(echostr);
				} catch (IOException e) {
					e.printStackTrace();
				}
		    }else{
		    	try {
					response.getWriter().write("");
				} catch (IOException e) {
					e.printStackTrace();
				}
		    }
		}else{
			handleMessage(request,response);
		}
	   
	}
	
	public void handleMessage(HttpServletRequest request,HttpServletResponse response) throws Exception{
		@SuppressWarnings("rawtypes")
		Map sendMessage = parseXml(request);
		System.out.println(sendMessage.size());
	}
	
	/** 
	 * 解析微信发来的请求（XML） 
	 *  
	 * @param request 
	 * @return 
	 * @throws Exception 
	 */  
	@SuppressWarnings("unchecked")  
	public static Map<String, String> parseXml(HttpServletRequest request) throws Exception {  
	    // 将解析结果存储在HashMap中  
	    Map<String, String> map = new HashMap<String, String>();  
	  
	    // 从request中取得输入流  
	    InputStream inputStream = request.getInputStream();  
	    // 读取输入流  
	    SAXReader reader = new SAXReader();  
	    Document document = reader.read(inputStream);  
	    // 得到xml根元素  
	    Element root = document.getRootElement();  
	    // 得到根元素的所有子节点  
	    List<Element> elementList = root.elements();  
	  
	    // 遍历所有子节点  
	    for (Element e : elementList){  
	    	System.out.println("name="+e.getName()+";value="+e.getText());
	        map.put(e.getName(), e.getText());  
	    }
	        
	    // 释放资源  
	    inputStream.close();  
	    inputStream = null;  
	  
	    return map;  
	}  
}

