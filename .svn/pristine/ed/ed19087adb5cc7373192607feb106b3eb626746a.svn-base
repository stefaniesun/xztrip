package xyz.svc.buyer.imp;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;

import xyz.dao.CommonDao;
import xyz.filter.MyRequestUtil;
import xyz.filter.ReturnUtil;
import xyz.model.core.OrderContent;
import xyz.model.main.ProductHotel;
import xyz.model.main.ProductScenic;
import xyz.model.main.Stock;
import xyz.model.member.Customer;
import xyz.svc.buyer.BuyerOrderSvc;
import xyz.util.DateUtil;
import xyz.util.StockPriceUtil;
import xyz.util.StringUtil;

public class BuyerOrderSvcImp implements BuyerOrderSvc {

	@Resource
	CommonDao commonDao;
	
	@Autowired
	StockPriceUtil stockPriceUtil;
	
	@Override
	public Map<String, Object> createOrder(String product, String type,
			int count, BigDecimal price,Date dateInfo, String personInfo, String remarkBuy) {
		if(dateInfo==null){
			return  ReturnUtil.returnMap(0, "出行日期不能为空！");
		}
		if(dateInfo.getTime()<DateUtil.shortStringToDate(DateUtil.dateToShortString(new Date())).getTime()){
			return  ReturnUtil.returnMap(0, "日期不能小于当天！");
		}
		String username = MyRequestUtil.getXyzSessionLogin().getUsername();
		Customer customer =  (Customer) commonDao.getObjectByUniqueCode("Customer", "username", username);
		if(customer==null){
			return  ReturnUtil.returnMap(0, "用户不存在！");
		}
		if(type.equals("scenic")){
			ProductScenic productObject =  (ProductScenic) commonDao.getObjectByUniqueCode("ProductScenic", "numberCode", product);
			if(productObject==null){
				return  ReturnUtil.returnMap(0, "产品不存在！");
			}
		}else if(type.equals("hotel")){
			ProductHotel productObject =  (ProductHotel) commonDao.getObjectByUniqueCode("ProductHotel", "numberCode", product);
			if(productObject==null){
				return  ReturnUtil.returnMap(0, "产品不存在！");
			}
		}else{
			return  ReturnUtil.returnMap(0, "错误的产品类目！");
		}
		
		Stock stock=stockPriceUtil.getStockByDate(product,dateInfo);
		if(stock==null||stock.getCount()==0){
			return  ReturnUtil.returnMap(0, "库存为空，请重新选择！");
		}
		if(price.compareTo(stock.getPrice())!=0){
			return  ReturnUtil.returnMap(0, "价格有变动，建议重新下单");
		}
		
		
		BigDecimal amount = new BigDecimal(count).multiply(price);
		
		String orderNum = StringUtil.get_new_fenxiaotid();
		String clientCode = StringUtil.get_clientCode(orderNum, 13);
		
		
		OrderContent orderContent=new OrderContent();
		orderContent.setOrderNum(orderNum);
		orderContent.setClientCode(clientCode);
		orderContent.setCount(count);
		orderContent.setPrice(price);
		orderContent.setBuyer(customer.getUsername());
		orderContent.setDateInfo(dateInfo);
		orderContent.setMoney(amount);
		orderContent.setAddDate(new Date());
		orderContent.setAlterDate(new Date());
		orderContent.setPersonInfo(personInfo);
		orderContent.setRemarkBuy(remarkBuy);
		
		commonDao.save(orderContent);
		
		
		//减库存
		stockPriceUtil.cutStock(product,dateInfo,count,clientCode, "b2b", remarkBuy);
		
		return ReturnUtil.returnMap(1, null);
	}

}
